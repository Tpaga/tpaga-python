# coding: utf-8

"""
DaviPlataApi.py
Copyright 2015 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DaviPlataApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_davi_plata_charge(self, body, **kwargs):
        """
        Adds a new DaviPlataCharge to Customer's DaviPlata
        Creates a new `DaviPlataCharge` and associates it to a `DaviPlata`.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_davi_plata_charge(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DaviPlataCharge body: The `DaviPlataCharge` object to be generated to a `DaviPlata`. It has the following fields\n- **id** its the id of the `DaviPlataCharge` thats going to be generated after creation.\n- **daviPlata** which is the identificator of the `DaviPlata` to be charged\n- **customer** which is the id of the `Customer` associated with the `DaviPlata`\n- **amount** which is the full amount of the charge\n- **currency** its the 3-letter ISO code for the currency.\n- **taxAmount** the amount that accounts as taxes.\n- **paid** its the status of the charge. true if its paid, false if its not.\n- **description** which is the desciption of the charge being made.\n- **orderId** commerce order identificator (required)
        :return: DaviPlataCharge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'body' is set
        if body is None:
            raise ValueError("Missing the required parameter `body` when calling `add_davi_plata_charge`")

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_davi_plata_charge" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/charge/daviplata'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='DaviPlataCharge',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_davi_plata_charge_by_id(self, id, **kwargs):
        """
        Retrieve a DaviPlataCharge by ID
        Get the details of an existing `DaviPlataCharge`. This method only requires an unique `DaviPlataCharge` identifier `id` that was returned upon `DaviPlataCharge` creation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_davi_plata_charge_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identification of `DaviPlataCharge` that needs to be retrieved (required)
        :return: DaviPlataCharge
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `get_davi_plata_charge_by_id`")

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_davi_plata_charge_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/charge/daviplata/{id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='DaviPlataCharge',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def add_davi_plata_chargeback(self, body, **kwargs):
        """
        Adds a new DaviPlataChargeback to Customer's DaviPlata
        Creates a new `DaviPlataChargeback` and associates it to a `DaviPlata`.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_davi_plata_chargeback(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DaviPlataChargeback body: The `DaviPlataChargeback` to be applied to a `DaviPlata`. It has the following fields\n- **id** its the id of the `DaviPlataChargeback` thats going to be generated after creation.\n- **daviPlata** its the id of the `DaviPlata` to be reinbursed.\n- **daviPlataCharge** its the id of the `DaviPlataCharge` to apply the Chargeback.\n- **reimbursed** its the status of the chargeback, true if its been reinbursed or false if its still pending. (required)
        :return: DaviPlataChargeback
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'body' is set
        if body is None:
            raise ValueError("Missing the required parameter `body` when calling `add_davi_plata_chargeback`")

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_davi_plata_chargeback" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/chargeback/daviplata'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='DaviPlataChargeback',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_davi_plata_chargeback_by_id(self, id, **kwargs):
        """
        Retrieve a DaviPlataChargeback by ID
        Get the details of an existing `DaviPlataChargeback`. This method only requires an unique `DaviPlataChargeback` identifier `id` that was returned upon `DaviPlataChargeback` creation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_davi_plata_chargeback_by_id(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str id: Identification of `DaviPlataChargeback` to be retrieved (required)
        :return: DaviPlataChargeback
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'id' is set
        if id is None:
            raise ValueError("Missing the required parameter `id` when calling `get_davi_plata_chargeback_by_id`")

        all_params = ['id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_davi_plata_chargeback_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/chargeback/daviplata/{id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='DaviPlataChargeback',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def add_davi_plata(self, customer_id, body, **kwargs):
        """
        Adds a new DaviPlata payment method to the Customer
        Creates a new `DaviPLata` and associates it to the `Customer`

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_davi_plata(customer_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customer_id: Identification of `Customer` to associate the new `DaviPlata` (required)
        :param DaviPlata body: The `DaviPlata` object to be added to the `Customer`\n- **id** its the id of the `DaviPlata` thats going to be generated after creation.\n- **number** its the `DaviPlata` number.\n- **lastFour** it the last four digits of the `DaviPlata` number\n- **customer** its the id of the `Customer` associated to the `DaviPlata`\n- **document** its the document number of the `Customer`\n- **documentType** its the type of document supplied, it can be CC, CE or TI\n- **maxAmount** its the maximum amount that can be charged to the associated `DaviPlata` (required)
        :return: DaviPlata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'customer_id' is set
        if customer_id is None:
            raise ValueError("Missing the required parameter `customer_id` when calling `add_davi_plata`")
        # verify the required parameter 'body' is set
        if body is None:
            raise ValueError("Missing the required parameter `body` when calling `add_davi_plata`")

        all_params = ['customer_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_davi_plata" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/customer/{customer_id}/daviplata'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='DaviPlata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def get_davi_plata_by_id(self, customer_id, daviplata_id, **kwargs):
        """
        Retrieve a DaviPlata by ID
        Get the details of an existing `DaviPlata`. This method only requires an unique `DaviPlata` identifier `id` that was returned upon `DaviPlata` creation.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_davi_plata_by_id(customer_id, daviplata_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customer_id: Identification of `Customer` associated with a `DaviPlata` (required)
        :param str daviplata_id: Identification of `DaviPlata` that needs to be retrieved (required)
        :return: DaviPlata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'customer_id' is set
        if customer_id is None:
            raise ValueError("Missing the required parameter `customer_id` when calling `get_davi_plata_by_id`")
        # verify the required parameter 'daviplata_id' is set
        if daviplata_id is None:
            raise ValueError("Missing the required parameter `daviplata_id` when calling `get_davi_plata_by_id`")

        all_params = ['customer_id', 'daviplata_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_davi_plata_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/customer/{customer_id}/daviplata/{daviplata_id}'.replace('{format}', 'json')
        method = 'GET'

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']
        if 'daviplata_id' in params:
            path_params['daviplata_id'] = params['daviplata_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='DaviPlata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_davi_plata_by_id(self, customer_id, daviplata_id, **kwargs):
        """
        Deletes a DaviPlata by ID
        Deletes a `DaviPlata` when its `id` matches the parameter. Only available when `DaviPlata` does not have associated Charges.

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_davi_plata_by_id(customer_id, daviplata_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str customer_id: Identification of `Customer` associated with a `DaviPlata` (required)
        :param str daviplata_id: Identification of `DaviPlata` to be deleted (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'customer_id' is set
        if customer_id is None:
            raise ValueError("Missing the required parameter `customer_id` when calling `delete_davi_plata_by_id`")
        # verify the required parameter 'daviplata_id' is set
        if daviplata_id is None:
            raise ValueError("Missing the required parameter `daviplata_id` when calling `delete_davi_plata_by_id`")

        all_params = ['customer_id', 'daviplata_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_davi_plata_by_id" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/customer/{customer_id}/daviplata/{daviplata_id}'.replace('{format}', 'json')
        method = 'DELETE'

        path_params = {}
        if 'customer_id' in params:
            path_params['customer_id'] = params['customer_id']
        if 'daviplata_id' in params:
            path_params['daviplata_id'] = params['daviplata_id']

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type=None,
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def verify_davi_plata(self, body, **kwargs):
        """
        Verifies the ownership of the associated DaviPlata
        This method requires two parameters. One is the unique `DaviPlata` identifier `id` that was returned upon `DaviPlata` creation. the second parameter is a six digit pin code `pinNumber` obtained through a SMS from the service provider of `DaviPlata`. Its  used to validate the ownership of the associated `DaviPlata`

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.verify_davi_plata(body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DaviPlataVerification body: it has two fields\n- **daviPlata** which is the Identification of the `DaviPlata` to verify\n- **pinNumber** which is a Six digit pin code used to validate `DaviPlata` as a payment method. (required)
        :return: DaviPlata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        # verify the required parameter 'body' is set
        if body is None:
            raise ValueError("Missing the required parameter `body` when calling `verify_davi_plata`")

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method verify_davi_plata" % key
                )
            params[key] = val
        del params['kwargs']

        resource_path = '/daviplata/verify'.replace('{format}', 'json')
        method = 'POST'

        path_params = {}

        query_params = {}

        header_params = {}

        form_params = {}
        files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['api_key']

        response = self.api_client.call_api(resource_path, method,
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=files,
                                            response_type='DaviPlata',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
