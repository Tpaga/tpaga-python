# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DaviPlataChargeback(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DaviPlataChargeback - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'davi_plata_charge': 'str',
            'davi_plata': 'str',
            'reimbursed': 'bool'
        }

        self.attribute_map = {
            'id': 'id',
            'davi_plata_charge': 'daviPlataCharge',
            'davi_plata': 'daviPlata',
            'reimbursed': 'reimbursed'
        }

        self._id = None
        self._davi_plata_charge = None
        self._davi_plata = None
        self._reimbursed = None

    @property
    def id(self):
        """
        Gets the id of this DaviPlataChargeback.


        :return: The id of this DaviPlataChargeback.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DaviPlataChargeback.


        :param id: The id of this DaviPlataChargeback.
        :type: str
        """
        self._id = id

    @property
    def davi_plata_charge(self):
        """
        Gets the davi_plata_charge of this DaviPlataChargeback.


        :return: The davi_plata_charge of this DaviPlataChargeback.
        :rtype: str
        """
        return self._davi_plata_charge

    @davi_plata_charge.setter
    def davi_plata_charge(self, davi_plata_charge):
        """
        Sets the davi_plata_charge of this DaviPlataChargeback.


        :param davi_plata_charge: The davi_plata_charge of this DaviPlataChargeback.
        :type: str
        """
        self._davi_plata_charge = davi_plata_charge

    @property
    def davi_plata(self):
        """
        Gets the davi_plata of this DaviPlataChargeback.


        :return: The davi_plata of this DaviPlataChargeback.
        :rtype: str
        """
        return self._davi_plata

    @davi_plata.setter
    def davi_plata(self, davi_plata):
        """
        Sets the davi_plata of this DaviPlataChargeback.


        :param davi_plata: The davi_plata of this DaviPlataChargeback.
        :type: str
        """
        self._davi_plata = davi_plata

    @property
    def reimbursed(self):
        """
        Gets the reimbursed of this DaviPlataChargeback.


        :return: The reimbursed of this DaviPlataChargeback.
        :rtype: bool
        """
        return self._reimbursed

    @reimbursed.setter
    def reimbursed(self, reimbursed):
        """
        Sets the reimbursed of this DaviPlataChargeback.


        :param reimbursed: The reimbursed of this DaviPlataChargeback.
        :type: bool
        """
        self._reimbursed = reimbursed

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
