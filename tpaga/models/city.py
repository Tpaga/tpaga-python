# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class City(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        City - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'state': 'str',
            'country': 'str'
        }

        self.attribute_map = {
            'name': 'name',
            'state': 'state',
            'country': 'country'
        }

        self._name = None
        self._state = None
        self._country = None

    @property
    def name(self):
        """
        Gets the name of this City.


        :return: The name of this City.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this City.


        :param name: The name of this City.
        :type: str
        """
        allowed_values = ["Bogot√°"]
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name`, must be one of {0}"
                .format(allowed_values)
            )
        self._name = name

    @property
    def state(self):
        """
        Gets the state of this City.
        ISO 3166-2 code for state

        :return: The state of this City.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this City.
        ISO 3166-2 code for state

        :param state: The state of this City.
        :type: str
        """
        allowed_values = ["DC"]
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state`, must be one of {0}"
                .format(allowed_values)
            )
        self._state = state

    @property
    def country(self):
        """
        Gets the country of this City.
        ISO 3166-1 Alpha 2 code for country

        :return: The country of this City.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this City.
        ISO 3166-1 Alpha 2 code for country

        :param country: The country of this City.
        :type: str
        """
        allowed_values = ["CO"]
        if country not in allowed_values:
            raise ValueError(
                "Invalid value for `country`, must be one of {0}"
                .format(allowed_values)
            )
        self._country = country

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
