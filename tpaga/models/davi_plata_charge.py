# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DaviPlataCharge(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DaviPlataCharge - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'amount': 'float',
            'tax_amount': 'float',
            'currency': 'str',
            'davi_plata': 'str',
            'order_id': 'str',
            'description': 'str',
            'paid': 'bool',
            'customer': 'str',
            'payment_transaction': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'amount': 'amount',
            'tax_amount': 'taxAmount',
            'currency': 'currency',
            'davi_plata': 'daviPlata',
            'order_id': 'orderId',
            'description': 'description',
            'paid': 'paid',
            'customer': 'customer',
            'payment_transaction': 'paymentTransaction'
        }

        self._id = None
        self._amount = None
        self._tax_amount = None
        self._currency = None
        self._davi_plata = None
        self._order_id = None
        self._description = None
        self._paid = None
        self._customer = None
        self._payment_transaction = None

    @property
    def id(self):
        """
        Gets the id of this DaviPlataCharge.


        :return: The id of this DaviPlataCharge.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DaviPlataCharge.


        :param id: The id of this DaviPlataCharge.
        :type: str
        """
        self._id = id

    @property
    def amount(self):
        """
        Gets the amount of this DaviPlataCharge.


        :return: The amount of this DaviPlataCharge.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this DaviPlataCharge.


        :param amount: The amount of this DaviPlataCharge.
        :type: float
        """
        self._amount = amount

    @property
    def tax_amount(self):
        """
        Gets the tax_amount of this DaviPlataCharge.


        :return: The tax_amount of this DaviPlataCharge.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """
        Sets the tax_amount of this DaviPlataCharge.


        :param tax_amount: The tax_amount of this DaviPlataCharge.
        :type: float
        """
        self._tax_amount = tax_amount

    @property
    def currency(self):
        """
        Gets the currency of this DaviPlataCharge.
        3-letter ISO code for currency.

        :return: The currency of this DaviPlataCharge.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this DaviPlataCharge.
        3-letter ISO code for currency.

        :param currency: The currency of this DaviPlataCharge.
        :type: str
        """
        self._currency = currency

    @property
    def davi_plata(self):
        """
        Gets the davi_plata of this DaviPlataCharge.


        :return: The davi_plata of this DaviPlataCharge.
        :rtype: str
        """
        return self._davi_plata

    @davi_plata.setter
    def davi_plata(self, davi_plata):
        """
        Sets the davi_plata of this DaviPlataCharge.


        :param davi_plata: The davi_plata of this DaviPlataCharge.
        :type: str
        """
        self._davi_plata = davi_plata

    @property
    def order_id(self):
        """
        Gets the order_id of this DaviPlataCharge.


        :return: The order_id of this DaviPlataCharge.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this DaviPlataCharge.


        :param order_id: The order_id of this DaviPlataCharge.
        :type: str
        """
        self._order_id = order_id

    @property
    def description(self):
        """
        Gets the description of this DaviPlataCharge.


        :return: The description of this DaviPlataCharge.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DaviPlataCharge.


        :param description: The description of this DaviPlataCharge.
        :type: str
        """
        self._description = description

    @property
    def paid(self):
        """
        Gets the paid of this DaviPlataCharge.


        :return: The paid of this DaviPlataCharge.
        :rtype: bool
        """
        return self._paid

    @paid.setter
    def paid(self, paid):
        """
        Sets the paid of this DaviPlataCharge.


        :param paid: The paid of this DaviPlataCharge.
        :type: bool
        """
        self._paid = paid

    @property
    def customer(self):
        """
        Gets the customer of this DaviPlataCharge.


        :return: The customer of this DaviPlataCharge.
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this DaviPlataCharge.


        :param customer: The customer of this DaviPlataCharge.
        :type: str
        """
        self._customer = customer

    @property
    def payment_transaction(self):
        """
        Gets the payment_transaction of this DaviPlataCharge.


        :return: The payment_transaction of this DaviPlataCharge.
        :rtype: str
        """
        return self._payment_transaction

    @payment_transaction.setter
    def payment_transaction(self, payment_transaction):
        """
        Sets the payment_transaction of this DaviPlataCharge.


        :param payment_transaction: The payment_transaction of this DaviPlataCharge.
        :type: str
        """
        self._payment_transaction = payment_transaction

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
