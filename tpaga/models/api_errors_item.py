# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ApiErrorsItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ApiErrorsItem - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'object': 'str',
            'field': 'str',
            'rejected_value': 'str',
            'message': 'str'
        }

        self.attribute_map = {
            'object': 'object',
            'field': 'field',
            'rejected_value': 'rejected-value',
            'message': 'message'
        }

        self._object = None
        self._field = None
        self._rejected_value = None
        self._message = None

    @property
    def object(self):
        """
        Gets the object of this ApiErrorsItem.


        :return: The object of this ApiErrorsItem.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """
        Sets the object of this ApiErrorsItem.


        :param object: The object of this ApiErrorsItem.
        :type: str
        """
        self._object = object

    @property
    def field(self):
        """
        Gets the field of this ApiErrorsItem.


        :return: The field of this ApiErrorsItem.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """
        Sets the field of this ApiErrorsItem.


        :param field: The field of this ApiErrorsItem.
        :type: str
        """
        self._field = field

    @property
    def rejected_value(self):
        """
        Gets the rejected_value of this ApiErrorsItem.


        :return: The rejected_value of this ApiErrorsItem.
        :rtype: str
        """
        return self._rejected_value

    @rejected_value.setter
    def rejected_value(self, rejected_value):
        """
        Sets the rejected_value of this ApiErrorsItem.


        :param rejected_value: The rejected_value of this ApiErrorsItem.
        :type: str
        """
        self._rejected_value = rejected_value

    @property
    def message(self):
        """
        Gets the message of this ApiErrorsItem.


        :return: The message of this ApiErrorsItem.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this ApiErrorsItem.


        :param message: The message of this ApiErrorsItem.
        :type: str
        """
        self._message = message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
