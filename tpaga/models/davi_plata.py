# coding: utf-8

"""
Copyright 2015 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DaviPlata(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DaviPlata - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'number': 'str',
            'document_number': 'str',
            'document_type': 'str',
            'last_four': 'str',
            'customer': 'str',
            'verified': 'bool',
            'max_amount': 'float'
        }

        self.attribute_map = {
            'id': 'id',
            'number': 'number',
            'document_number': 'documentNumber',
            'document_type': 'documentType',
            'last_four': 'lastFour',
            'customer': 'customer',
            'verified': 'verified',
            'max_amount': 'maxAmount'
        }

        self._id = None
        self._number = None
        self._document_number = None
        self._document_type = None
        self._last_four = None
        self._customer = None
        self._verified = None
        self._max_amount = None

    @property
    def id(self):
        """
        Gets the id of this DaviPlata.


        :return: The id of this DaviPlata.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DaviPlata.


        :param id: The id of this DaviPlata.
        :type: str
        """
        self._id = id

    @property
    def number(self):
        """
        Gets the number of this DaviPlata.


        :return: The number of this DaviPlata.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """
        Sets the number of this DaviPlata.


        :param number: The number of this DaviPlata.
        :type: str
        """
        self._number = number

    @property
    def document_number(self):
        """
        Gets the document_number of this DaviPlata.


        :return: The document_number of this DaviPlata.
        :rtype: str
        """
        return self._document_number

    @document_number.setter
    def document_number(self, document_number):
        """
        Sets the document_number of this DaviPlata.


        :param document_number: The document_number of this DaviPlata.
        :type: str
        """
        self._document_number = document_number

    @property
    def document_type(self):
        """
        Gets the document_type of this DaviPlata.


        :return: The document_type of this DaviPlata.
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """
        Sets the document_type of this DaviPlata.


        :param document_type: The document_type of this DaviPlata.
        :type: str
        """
        allowed_values = ["CC", "CE", "TI"]
        if document_type not in allowed_values:
            raise ValueError(
                "Invalid value for `document_type`, must be one of {0}"
                .format(allowed_values)
            )
        self._document_type = document_type

    @property
    def last_four(self):
        """
        Gets the last_four of this DaviPlata.


        :return: The last_four of this DaviPlata.
        :rtype: str
        """
        return self._last_four

    @last_four.setter
    def last_four(self, last_four):
        """
        Sets the last_four of this DaviPlata.


        :param last_four: The last_four of this DaviPlata.
        :type: str
        """
        self._last_four = last_four

    @property
    def customer(self):
        """
        Gets the customer of this DaviPlata.


        :return: The customer of this DaviPlata.
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """
        Sets the customer of this DaviPlata.


        :param customer: The customer of this DaviPlata.
        :type: str
        """
        self._customer = customer

    @property
    def verified(self):
        """
        Gets the verified of this DaviPlata.


        :return: The verified of this DaviPlata.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """
        Sets the verified of this DaviPlata.


        :param verified: The verified of this DaviPlata.
        :type: bool
        """
        self._verified = verified

    @property
    def max_amount(self):
        """
        Gets the max_amount of this DaviPlata.


        :return: The max_amount of this DaviPlata.
        :rtype: float
        """
        return self._max_amount

    @max_amount.setter
    def max_amount(self, max_amount):
        """
        Sets the max_amount of this DaviPlata.


        :param max_amount: The max_amount of this DaviPlata.
        :type: float
        """
        self._max_amount = max_amount

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()
